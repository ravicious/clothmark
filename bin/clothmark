#!/usr/bin/env ruby

require "optparse"
require File.expand_path(File.dirname(__FILE__) + '/../lib/clothmark')

options = {}

optparse = OptionParser.new do |opts|
  @usage = opts
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
  
  # If input aren't specified, then first arg will be used
  options[:input] = ARGV.first
  opts.on('-i', '--input FILE', 'Specify input file (if it aren\'t specified, then first argument will be used)') do |arg|
    options[:input] = arg
  end

  # If output isn't specified, then it will be an empty string
  options[:output] = ""
  opts.on('-o', '--output FILE', 'Specify output file') do |arg|
    options[:output] = arg || nil
  end

  # If this option isn't specified, then it will be false
  options[:additional_html] = false
  opts.on('-ah', '--additional-html', 'Specify, do additional HTML and CSS will be used (default - false)') do
    options[:additional_html] = true
  end

  options[:markup] = "markdown"
  opts.on('-m', '--markup LANG', %w(markdown textile bbcode) ,'Specify markup language (markdown, textile or bbcode, default is markdown)') do |arg|
    options[:markup] = arg.downcase || "markdown"
  end

end

if ARGV.size < 1
  puts @usage
  exit
else
  begin
    optparse.parse!
  rescue => e
      puts e
      puts "To see help, type:"
      puts "$ #{File.basename(__FILE__)} -h"
      exit
  end #begin
end

@cloth = ClothMark.new(options[:input], options[:markup], options[:additional_html], options[:output])
@cloth.read_from_file
@cloth.to_html
@cloth.save_to_file

puts "File converted and saved to #{File.expand_path(@cloth.output)}"
